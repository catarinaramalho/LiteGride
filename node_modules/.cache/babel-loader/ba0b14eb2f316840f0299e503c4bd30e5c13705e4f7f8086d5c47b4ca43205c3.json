{"ast":null,"code":"\"use strict\";\n\n/**\r\n * gridstack-engine.ts 7.2.3\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridStackEngine = void 0;\nconst utils_1 = require(\"./utils\");\n/**\r\n * Defines the GridStack engine that does most no DOM grid manipulation.\r\n * See GridStack methods and vars for descriptions.\r\n *\r\n * NOTE: values should not be modified directly - call the main GridStack API instead\r\n */\nclass GridStackEngine {\n  constructor() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.addedNodes = [];\n    this.removedNodes = [];\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n  batchUpdate() {\n    let flag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      this._packNodes()._notify();\n    }\n    return this;\n  }\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  _useEntireRowArea(node, nn) {\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\r\n   * return true if we moved. */\n  _fixCollisions(node) {\n    let nn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : node;\n    let collide = arguments.length > 2 ? arguments[2] : undefined;\n    let opt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {\n        x: 0,\n        w: this.column,\n        y: nn.y,\n        h: nn.h\n      };\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt = {\n      nested: true,\n      pack: false\n    };\n    while (collide = collide || this.collide(node, area, opt.skip)) {\n      // could collide with more than 1 item... so repeat for each\n      let moved;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float && (\n      // can take space we had, or before where we're going\n      !this.collide(collide, Object.assign(Object.assign({}, collide), {\n        y: node.y\n      }), node) || !this.collide(collide, Object.assign(Object.assign({}, collide), {\n        y: nn.y - collide.h\n      }), node))) {\n        node._skipDown = node._skipDown || nn.y > node.y;\n        moved = this.moveNode(node, Object.assign(Object.assign(Object.assign({}, nn), {\n          y: collide.y + collide.h\n        }), newOpt));\n        if (collide.locked && moved) {\n          utils_1.Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          utils_1.Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, Object.assign(Object.assign(Object.assign({}, collide), {\n          y: nn.y + nn.h,\n          skip: node\n        }), newOpt));\n      }\n      if (!moved) {\n        return didMove;\n      } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  collide(skip) {\n    let area = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : skip;\n    let skip2 = arguments.length > 2 ? arguments[2] : undefined;\n    return this.nodes.find(n => n !== skip && n !== skip2 && utils_1.Utils.isIntercepted(n, area));\n  }\n  collideAll(skip) {\n    let area = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : skip;\n    let skip2 = arguments.length > 2 ? arguments[2] : undefined;\n    return this.nodes.filter(n => n !== skip && n !== skip2 && utils_1.Utils.isIntercepted(n, area));\n  }\n  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n  directionCollideCoverage(node, o, collides) {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = Object.assign({}, o.rect); // where we are\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n    let collide;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE,\n        xOver = Number.MAX_VALUE,\n        overMax = 0.5; // need >50%\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) {\n        // from above\n        yOver = (r.y + r.h - r2.y) / r2.h;\n      } else if (r0.y + r0.h > r2.y + r2.h) {\n        // from below\n        yOver = (r2.y + r2.h - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) {\n        // from the left\n        xOver = (r.x + r.w - r2.x) / r2.w;\n      } else if (r0.x + r0.w > r2.x + r2.w) {\n        // from the right\n        xOver = (r2.x + r2.w - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    o.collide = collide; // save it so we don't have to find it again\n    return collide;\n  }\n  /** does a pixel coverage returning the node that has the most coverage by area */\n  /*\r\n  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\r\n    let collide: GridStackNode;\r\n    let overMax = 0;\r\n    collides.forEach(n => {\r\n      if (n.locked || !n._rect) return;\r\n      let over = Utils.areaIntercept(r, n._rect);\r\n      if (over > overMax) {\r\n        overMax = over;\r\n        collide = n;\r\n      }\r\n    });\r\n    return {collide, over: overMax};\r\n  }\r\n  */\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  cacheRects(w, h, top, right, bottom, left) {\n    this.nodes.forEach(n => n._rect = {\n      y: n.y * h + top,\n      x: n.x * w + left,\n      w: n.w * w - left - right,\n      h: n.h * h - top - bottom\n    });\n    return this;\n  }\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  swap(a, b) {\n    if (!b || b.locked || !a || a.locked) return false;\n    function _doSwap() {\n      let x = b.x,\n        y = b.y;\n      b.x = a.x;\n      b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x;\n        a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w;\n        a.y = y; // a -> goes after b\n      } else {\n        a.x = x;\n        a.y = y; // a -> old b position\n      }\n\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching; // remember if we called it (vs undefined)\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = utils_1.Utils.isTouching(a, b))) return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = utils_1.Utils.isTouching(a, b)))) {\n      if (b.y < a.y) {\n        let t = a;\n        a = b;\n        b = t;\n      } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = utils_1.Utils.isTouching(a, b)))) {\n      if (b.x < a.x) {\n        let t = a;\n        a = b;\n        b = t;\n      } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n  isAreaEmpty(x, y, w, h) {\n    let nn = {\n      x: x || 0,\n      y: y || 0,\n      w: w || 1,\n      h: h || 1\n    };\n    return !this.collide(nn);\n  }\n  /** re-layout grid items to reclaim any empty space */\n  compact() {\n    if (this.nodes.length === 0) return this;\n    this.batchUpdate().sortNodes();\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach(node => {\n      if (!node.locked) {\n        node.autoPosition = true;\n      }\n      this.addNode(node, false); // 'false' for add event trigger\n      node._dirty = true; // will force attr update\n    });\n\n    return this.batchUpdate(false);\n  }\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  set float(val) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n  /** float getter method */\n  get float() {\n    return this._float || false;\n  }\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  sortNodes(dir) {\n    this.nodes = utils_1.Utils.sort(this.nodes, dir, this.column);\n    return this;\n  }\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  _packNodes() {\n    if (this.batchMode) {\n      return this;\n    }\n    this.sortNodes(); // first to last\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {\n            x: n.x,\n            y: newY,\n            w: n.w,\n            h: n.h\n          });\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {\n            x: n.x,\n            y: newY,\n            w: n.w,\n            h: n.h\n          });\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = n.y !== newY;\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n  /**\r\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\r\n   * @param node to adjust\r\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\r\n   */\n  prepareNode(node, resizing) {\n    node = node || {};\n    node._id = node._id || GridStackEngine._idSeq++;\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n    // assign defaults for missing required fields\n    let defaults = {\n      x: 0,\n      y: 0,\n      w: 1,\n      h: 1\n    };\n    utils_1.Utils.defaults(node, defaults);\n    if (!node.autoPosition) {\n      delete node.autoPosition;\n    }\n    if (!node.noResize) {\n      delete node.noResize;\n    }\n    if (!node.noMove) {\n      delete node.noMove;\n    }\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string') {\n      node.x = Number(node.x);\n    }\n    if (typeof node.y == 'string') {\n      node.y = Number(node.y);\n    }\n    if (typeof node.w == 'string') {\n      node.w = Number(node.w);\n    }\n    if (typeof node.h == 'string') {\n      node.h = Number(node.h);\n    }\n    if (isNaN(node.x)) {\n      node.x = defaults.x;\n      node.autoPosition = true;\n    }\n    if (isNaN(node.y)) {\n      node.y = defaults.y;\n      node.autoPosition = true;\n    }\n    if (isNaN(node.w)) {\n      node.w = defaults.w;\n    }\n    if (isNaN(node.h)) {\n      node.h = defaults.h;\n    }\n    return this.nodeBoundFix(node, resizing);\n  }\n  /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\n  nodeBoundFix(node, resizing) {\n    let before = node._orig || utils_1.Utils.copyPos({}, node);\n    if (node.maxW) {\n      node.w = Math.min(node.w, node.maxW);\n    }\n    if (node.maxH) {\n      node.h = Math.min(node.h, node.maxH);\n    }\n    if (node.minW && node.minW <= this.column) {\n      node.w = Math.max(node.w, node.minW);\n    }\n    if (node.minH) {\n      node.h = Math.max(node.h, node.minH);\n    }\n    // if user loaded a larger than allowed widget for current # of columns (or force 1 column mode),\n    // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n    // IFF we're not in the middle of column resizing!\n    const saveOrig = this.column === 1 || node.x + node.w > this.column;\n    if (saveOrig && this.column < 12 && !this._inColumnResize && !node.autoPosition && node._id && this.findCacheLayout(node, 12) === -1) {\n      let copy = Object.assign({}, node); // need _id + positions\n      copy.x = Math.min(11, copy.x);\n      copy.w = Math.min(12, copy.w);\n      this.cacheOneLayout(copy, 12);\n    }\n    if (node.w > this.column) {\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n    if (!utils_1.Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n    return node;\n  }\n  /** returns a list of modified nodes from their original values */\n  getDirtyNodes(verify) {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !utils_1.Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  _notify(removedNodes) {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n  /** @internal remove dirty and last tried info */\n  cleanNodes() {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n  /** @internal called to save initial position/size to track real dirty state.\r\n   * Note: should be called right after we call change event (so next API is can detect changes)\r\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  saveInitial() {\n    this.nodes.forEach(n => {\n      n._orig = utils_1.Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  restoreInitial() {\n    this.nodes.forEach(n => {\n      if (utils_1.Utils.samePos(n, n._orig)) return;\n      utils_1.Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n  /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found */\n  findEmptyPosition(node) {\n    this.sortNodes();\n    let found = false;\n    for (let i = 0; !found; ++i) {\n      let x = i % this.column;\n      let y = Math.floor(i / this.column);\n      if (x + node.w > this.column) {\n        continue;\n      }\n      let box = {\n        x,\n        y,\n        w: node.w,\n        h: node.h\n      };\n      if (!this.nodes.find(n => utils_1.Utils.isIntercepted(box, n))) {\n        node.x = x;\n        node.y = y;\n        found = true;\n      }\n    }\n    return found;\n  }\n  /** call to add the given node to our list, fixing collision and re-packing */\n  addNode(node) {\n    let triggerAddEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n    if (node.autoPosition && this.findEmptyPosition(node)) {\n      delete node.autoPosition; // found our slot\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) {\n      this.addedNodes.push(node);\n    }\n    this._fixCollisions(node);\n    if (!this.batchMode) {\n      this._packNodes()._notify();\n    }\n    return node;\n  }\n  removeNode(node) {\n    let removeDOM = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let triggerEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!this.nodes.find(n => n === node)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) {\n      // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n !== node);\n    return this._packNodes()._notify([node]);\n  }\n  removeAll() {\n    let removeDOM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    delete this._layouts;\n    if (this.nodes.length === 0) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\r\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\r\n   * others in a clone first, then apply those changes if still within specs. */\n  moveNodeCheck(node, o) {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n === node) {\n          clonedNode = Object.assign({}, n);\n          return clonedNode;\n        }\n        return Object.assign({}, n);\n      })\n    });\n    if (!clonedNode) return false;\n    // check if we're covering 50% collision and could move\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;\n    // else check if we can force a swap (float=true, or different shapes) on non-resize\n    if (!canMove && !o.resizing && o.collide) {\n      let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n      if (this.swap(node, collide)) {\n        // swaps and mark dirty\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      utils_1.Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  willItFit(node) {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        return Object.assign({}, n);\n      })\n    });\n    let n = Object.assign({}, node); // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el;\n    delete n._id;\n    delete n.content;\n    delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = utils_1.Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n  /** true if x,y or w,h are different after clamping to min/max */\n  changedPosConstrain(node, p) {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) {\n      p.w = Math.min(p.w, node.maxW);\n    }\n    if (node.maxH) {\n      p.h = Math.min(p.h, node.maxH);\n    }\n    if (node.minW) {\n      p.w = Math.max(p.w, node.minW);\n    }\n    if (node.minH) {\n      p.h = Math.max(p.h, node.minH);\n    }\n    return node.w !== p.w || node.h !== p.h;\n  }\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  moveNode(node, o) {\n    var _a, _b;\n    if (!node || /*node.locked ||*/!o) return false;\n    let wasUndefinedPack;\n    if (o.pack === undefined) {\n      wasUndefinedPack = o.pack = true;\n    }\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') {\n      o.x = node.x;\n    }\n    if (typeof o.y !== 'number') {\n      o.y = node.y;\n    }\n    if (typeof o.w !== 'number') {\n      o.w = node.w;\n    }\n    if (typeof o.h !== 'number') {\n      o.h = node.h;\n    }\n    let resizing = node.w !== o.w || node.h !== o.h;\n    let nn = utils_1.Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    utils_1.Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    utils_1.Utils.copyPos(o, nn);\n    if (utils_1.Utils.samePos(node, o)) return false;\n    let prevPos = utils_1.Utils.copyPos({}, node);\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      let activeDrag = node._moving && !o.nested;\n      // check to make sure we actually collided over 50% surface area while dragging\n      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n      // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n      if (activeDrag && collide && ((_b = (_a = node.grid) === null || _a === void 0 ? void 0 : _a.opts) === null || _b === void 0 ? void 0 : _b.subGridDynamic) && !node.grid._isTemp) {\n        let over = utils_1.Utils.areaIntercept(o.rect, collide._rect);\n        let a1 = utils_1.Utils.area(o.rect);\n        let a2 = utils_1.Utils.area(collide._rect);\n        let perc = over / (a1 < a2 ? a1 : a2);\n        if (perc > .8) {\n          collide.grid.makeSubGrid(collide.el, undefined, node);\n          collide = undefined;\n        }\n      }\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n        if (wasUndefinedPack) delete o.pack;\n      }\n    }\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      utils_1.Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()._notify();\n    }\n    return !utils_1.Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  getRow() {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n  beginUpdate(node) {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n  endUpdate() {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\r\n   * returning a list of widgets for serialization */\n  save() {\n    let saveElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var _a;\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = (_a = this._layouts) === null || _a === void 0 ? void 0 : _a.length;\n    let layout = len && this.column !== len - 1 ? this._layouts[len - 1] : null;\n    let list = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout === null || layout === void 0 ? void 0 : layout.find(l => l._id === n._id);\n      let w = Object.assign({}, n);\n      // use layout info instead if set\n      if (wl) {\n        w.x = wl.x;\n        w.y = wl.y;\n        w.w = wl.w;\n      }\n      utils_1.Utils.removeInternalForSave(w, !saveElement);\n      list.push(w);\n    });\n    return list;\n  }\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  layoutsNodesChange(nodes) {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      } else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (node.y !== node._orig.y) {\n            n.y += node.y - node._orig.y;\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n\n    return this;\n  }\n  /**\r\n   * @internal Called to scale the widget width & position up/down based on the column change.\r\n   * Note we store previous layouts (especially original ones) to make it possible to go\r\n   * from say 12 -> 1 -> 12 and get back to where we were.\r\n   *\r\n   * @param prevColumn previous number of columns\r\n   * @param column  new column number\r\n   * @param nodes different sorted list (ex: DOM order) instead of current list\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\n  updateNodeWidths(prevColumn, column, nodes) {\n    let layout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'moveScale';\n    var _a;\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\n    this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes = [];\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && (nodes === null || nodes === void 0 ? void 0 : nodes.length)) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = utils_1.Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    let cacheNodes = [];\n    if (column > prevColumn) {\n      cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && ((_a = this._layouts[lastIndex]) === null || _a === void 0 ? void 0 : _a.length)) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            n.x = cacheNode.x;\n            n.y = cacheNode.y;\n            n.w = cacheNode.w;\n          }\n        });\n      }\n    }\n    // if we found cache re-use those nodes that are still current\n    cacheNodes.forEach(cacheNode => {\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\n      if (j !== -1) {\n        // still current, use cache info positions\n        nodes[j].x = cacheNode.x;\n        nodes[j].y = cacheNode.y;\n        nodes[j].w = cacheNode.w;\n        newNodes.push(nodes[j]);\n        nodes.splice(j, 1);\n      }\n    });\n    // ...and add any extra non-cached ones\n    if (nodes.length) {\n      if (typeof layout === 'function') {\n        layout(column, prevColumn, newNodes, nodes);\n      } else if (!domOrder) {\n        let ratio = column / prevColumn;\n        let move = layout === 'move' || layout === 'moveScale';\n        let scale = layout === 'scale' || layout === 'moveScale';\n        nodes.forEach(node => {\n          // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n          node.x = column === 1 ? 0 : move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1);\n          node.w = column === 1 || prevColumn === 1 ? 1 : scale ? Math.round(node.w * ratio) || 1 : Math.min(node.w, column);\n          newNodes.push(node);\n        });\n        nodes = [];\n      }\n    }\n    // finally re-layout them in reverse order (to get correct placement)\n    if (!domOrder) newNodes = utils_1.Utils.sort(newNodes, -1, column);\n    this._inColumnResize = true; // prevent cache update\n    this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n    newNodes.forEach(node => {\n      this.addNode(node, false); // 'false' for add event trigger\n      delete node._orig; // make sure the commit doesn't try to restore things back to original\n    });\n\n    this.batchUpdate(false);\n    delete this._inColumnResize;\n    return this;\n  }\n  /**\r\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\r\n   * @param nodes list of nodes\r\n   * @param column corresponding column index to save it under\r\n   * @param clear if true, will force other caches to be removed (default false)\r\n   */\n  cacheLayout(nodes, column) {\n    let clear = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let copy = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {\n        x: n.x,\n        y: n.y,\n        w: n.w,\n        _id: n._id\n      }; // only thing we change is x,y,w and id to find it back\n    });\n\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n  /**\r\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\r\n   * @param node single node to cache\r\n   * @param column corresponding column index to save it under\r\n   */\n  cacheOneLayout(n, column) {\n    n._id = n._id || GridStackEngine._idSeq++;\n    let layout = {\n      x: n.x,\n      y: n.y,\n      w: n.w,\n      _id: n._id\n    };\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this.findCacheLayout(n, column);\n    if (index === -1) this._layouts[column].push(layout);else this._layouts[column][index] = layout;\n    return this;\n  }\n  findCacheLayout(n, column) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = this._layouts) === null || _a === void 0 ? void 0 : _a[column]) === null || _b === void 0 ? void 0 : _b.findIndex(l => l._id === n._id)) !== null && _c !== void 0 ? _c : -1;\n  }\n  /** called to remove all internal values but the _id */\n  cleanupNode(node) {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\nexports.GridStackEngine = GridStackEngine;\n/** @internal unique global internal _id counter NOT starting at 0 */\nGridStackEngine._idSeq = 1;","map":{"version":3,"names":["utils_1","require","GridStackEngine","constructor","opts","arguments","length","undefined","addedNodes","removedNodes","column","maxRow","_float","float","nodes","onChange","batchUpdate","flag","batchMode","_prevFloat","saveInitial","_packNodes","_notify","_useEntireRowArea","node","nn","_hasLocked","_moving","_skipDown","y","_fixCollisions","collide","opt","sortNodes","nested","swap","area","x","w","h","skip","didMove","newOpt","pack","moved","locked","Object","assign","moveNode","Utils","copyPos","skip2","find","n","isIntercepted","collideAll","filter","directionCollideCoverage","o","collides","rect","_rect","r0","r","forEach","r2","yOver","Number","MAX_VALUE","xOver","overMax","over","Math","min","cacheRects","top","right","bottom","left","a","b","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","copyNodes","autoPosition","addNode","val","dir","sort","_updating","_orig","newY","i","canBeMoved","prepareNode","resizing","_id","_idSeq","defaults","noResize","noMove","isNaN","nodeBoundFix","before","maxW","maxH","minW","max","minH","saveOrig","_inColumnResize","findCacheLayout","copy","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","cleanNodes","_lastTried","some","restoreInitial","findEmptyPosition","found","floor","box","triggerAddEvent","dup","_temporaryRemoved","_removeDOM","push","removeNode","removeDOM","triggerEvent","removeAll","_layouts","moveNodeCheck","changedPosConstrain","clonedNode","clone","map","canMove","getRow","el","gridstackNode","c","willItFit","_willFitPos","cleanupNode","content","grid","p","wasUndefinedPack","prevPos","needToMove","activeDrag","_b","_a","subGridDynamic","_isTemp","areaIntercept","a1","a2","perc","makeSubGrid","reduce","row","beginUpdate","endUpdate","save","saveElement","len","layout","list","wl","l","removeInternalForSave","layoutsNodesChange","ratio","round","updateNodeWidths","prevColumn","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","move","scale","clear","index","_c","prop","exports"],"sources":["/home/catarina.santos/litegride/node_modules/gridstack/src/gridstack-engine.ts"],"sourcesContent":["/**\n * gridstack-engine.ts 7.2.3\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore back (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter NOT starting at 0 */\n  public static _idSeq = 1;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(flag = true): GridStackEngine {\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      this._packNodes()._notify();\n    }\n    return this;\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n  protected directionCollideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    o.collide = collide; // save it so we don't have to find it again\n    return collide;\n  }\n\n  /** does a pixel coverage returning the node that has the most coverage by area */\n  /*\n  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n    let collide: GridStackNode;\n    let overMax = 0;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let over = Utils.areaIntercept(r, n._rect);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return {collide, over: overMax};\n  }\n  */\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space */\n  public compact(): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    this.batchUpdate()\n      .sortNodes();\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach(node => {\n      if (!node.locked) {\n        node.autoPosition = true;\n      }\n      this.addNode(node, false); // 'false' for add event trigger\n      node._dirty = true; // will force attr update\n    });\n    return this.batchUpdate(false);\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir?: -1 | 1): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id || GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w))  { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    // if user loaded a larger than allowed widget for current # of columns (or force 1 column mode),\n    // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n    // IFF we're not in the middle of column resizing!\n    const saveOrig = this.column === 1 || node.x + node.w > this.column;\n    if (saveOrig && this.column < 12 && !this._inColumnResize && !node.autoPosition && node._id && this.findCacheLayout(node, 12) === -1) {\n      let copy = {...node}; // need _id + positions\n      copy.x = Math.min(11, copy.x);\n      copy.w = Math.min(12, copy.w);\n      this.cacheOneLayout(copy, 12);\n    }\n\n    if (node.w > this.column) {\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found */\n  public findEmptyPosition(node: GridStackNode): boolean {\n    this.sortNodes();\n    let found = false;\n    for (let i = 0; !found; ++i) {\n      let x = i % this.column;\n      let y = Math.floor(i / this.column);\n      if (x + node.w > this.column) {\n        continue;\n      }\n      let box = {x, y, w: node.w, h: node.h};\n      if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\n        node.x = x;\n        node.y = y;\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    if (node.autoPosition && this.findEmptyPosition(node)) {\n      delete node.autoPosition; // found our slot\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n === node)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n !== node);\n    return this._packNodes()\n      ._notify([node]);\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (this.nodes.length === 0) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n === node) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // check if we're covering 50% collision and could move\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;\n    // else check if we can force a swap (float=true, or different shapes) on non-resize\n    if (!canMove && !o.resizing && o.collide) {\n      let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n      if (this.swap(node, collide)) { // swaps and mark dirty\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    let wasUndefinedPack: boolean;\n    if (o.pack === undefined) {\n      wasUndefinedPack = o.pack = true;\n    }\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      let activeDrag = node._moving && !o.nested;\n      // check to make sure we actually collided over 50% surface area while dragging\n      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n      // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n      if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n        let over = Utils.areaIntercept(o.rect, collide._rect);\n        let a1 = Utils.area(o.rect);\n        let a2 = Utils.area(collide._rect);\n        let perc = over / (a1 < a2 ? a1 : a2);\n        if (perc > .8) {\n          collide.grid.makeSubGrid(collide.el, undefined, node);\n          collide = undefined;\n        }\n      }\n\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n        if (wasUndefinedPack) delete o.pack;\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\n   * returning a list of widgets for serialization */\n  public save(saveElement = true): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      let w: GridStackNode = {...n};\n      // use layout info instead if set\n      if (wl) { w.x = wl.x; w.y = wl.y; w.w = wl.w; }\n      Utils.removeInternalForSave(w, !saveElement);\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public updateNodeWidths(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\n    this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    let cacheNodes: GridStackNode[] = [];\n    if (column > prevColumn) {\n      cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            n.x = cacheNode.x;\n            n.y = cacheNode.y;\n            n.w = cacheNode.w;\n          }\n        });\n      }\n    }\n\n    // if we found cache re-use those nodes that are still current\n    cacheNodes.forEach(cacheNode => {\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\n      if (j !== -1) {\n        // still current, use cache info positions\n        nodes[j].x = cacheNode.x;\n        nodes[j].y = cacheNode.y;\n        nodes[j].w = cacheNode.w;\n        newNodes.push(nodes[j]);\n        nodes.splice(j, 1);\n      }\n    });\n    // ...and add any extra non-cached ones\n    if (nodes.length) {\n      if (typeof layout === 'function') {\n        layout(column, prevColumn, newNodes, nodes);\n      } else if (!domOrder) {\n        let ratio = column / prevColumn;\n        let move = (layout === 'move' || layout === 'moveScale');\n        let scale = (layout === 'scale' || layout === 'moveScale');\n        nodes.forEach(node => {\n          // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n          node.w = ((column === 1 || prevColumn === 1) ? 1 :\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n          newNodes.push(node);\n        });\n        nodes = [];\n      }\n    }\n\n    // finally re-layout them in reverse order (to get correct placement)\n    if (!domOrder) newNodes = Utils.sort(newNodes, -1, column);\n    this._inColumnResize = true; // prevent cache update\n    this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n    newNodes.forEach(node => {\n      this.addNode(node, false); // 'false' for add event trigger\n      delete node._orig; // make sure the commit doesn't try to restore things back to original\n    });\n    this.batchUpdate(false);\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id || GridStackEngine._idSeq++;\n    let layout: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this.findCacheLayout(n, column);\n    if (index === -1)\n      this._layouts[column].push(layout);\n    else\n      this._layouts[column][index] = layout;\n    return this;\n  }\n\n  protected findCacheLayout(n: GridStackNode, column: number): number {\n    return this._layouts?.[column]?.findIndex(l => l._id === n._id) ?? -1;\n  }\n\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}