{"ast":null,"code":"var _jsxFileName = \"/home/catarina.santos/litegride/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { use } from 'react';\nimport { Chart } from \"react-google-charts\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport 'gridstack/dist/gridstack.min.css';\nimport './App.css';\nimport './litegride.css';\nimport { GridStack } from 'gridstack';\nimport Tema from './assets/img/tema.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyComponent() {\n  _s();\n  const gridRef = useRef(null);\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const options = {\n      draggable: {\n        handle: '.dragbox-header',\n        scroll: false,\n        appendTo: 'body'\n      },\n      placeholderClass: 'placeholder',\n      acceptWidgets: true,\n      cellHeight: 60\n    };\n    const grid = GridStack.init(options, gridRef.current);\n    const chart = Highcharts.chart(chartRef.current, {\n      chart: {\n        animation: false,\n        type: 'bar'\n      },\n      plotOptions: {\n        series: {\n          animation: false\n        }\n      },\n      title: {\n        text: 'Fruit Consumption'\n      },\n      xAxis: {\n        categories: ['Apples', 'Bananas', 'Oranges']\n      },\n      yAxis: {\n        title: {\n          text: 'Fruit eaten'\n        }\n      },\n      series: [{\n        name: 'Jane',\n        data: [1, 0, 4]\n      }, {\n        name: 'John',\n        data: [5, 7, 3]\n      }]\n    });\n    grid.on('change', (event, items) => {\n      const chartContainer = chart.renderTo;\n      const chartHeader = document.querySelector('#testChartHeader');\n      const chartHeight = chartContainer.parentElement.clientHeight - chartHeader.clientHeight;\n      chartContainer.style.height = `${chartHeight}px`;\n      chart.reflow();\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-stack\",\n      ref: gridRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"testChart\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"testChartHeader\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(MyComponent, \"TlHB36nBtnUiZUEQL+/O2hzGBWk=\");\n_c = MyComponent;\nexport default App;\n\n// function App() {\n//   const [options, setOptions] = useState({\n//     title: 'Gráfico de Pizza'\n//   });\n//   const [optionsBar, setOptionsBar] = useState({\n//     title: 'Gráfico de Barra'\n//   });\n//   const [data, setData] = useState([\n//     ['Linguagens', 'Quantidade'],\n//     ['React', 100],\n//     ['Angula', 80],\n//     ['Vue', 50],\n//   ]);\n//   const [dataBar, setDataBar] = useState([\n//     ['Cidades', '2010 População', '2000 População'],\n//     ['New York City, NY', 8175000, 8008000],\n//     ['Los Angeles, CA', 3792000, 3694000],\n//     ['Chicago, IL', 2695000, 2896000],\n//     ['Houston, TX', 2099000, 1953000],\n//     ['Philadelphia, PA', 1526000, 1517000],\n//   ]);\n//   const getOptions = (type) => ({\n//     chart: {\n//       type,\n//       width: 500,\n//       height: 300,\n//     },\n//     title: {\n//       text: \"Gráfico\",\n//     },\n//     yAxis: {\n//       title: {\n//         text: 'Values',\n//       },\n//     },\n//     series: [\n//       {\n//         data: [1, 2, 1, 4, 3, 6],\n//       },\n//       {\n//         data: [2, 7, 0, 4, 6, 2],\n//       },\n//     ],\n//   });\n\n//   GridStack.init();\n//   return (\n//     <div className=\"App\">\n//       <img className=\"App-logo\" src={Tema} />\n//       <div className=\"grid-stack\">\n//         <div className=\"grid-stack-item\">\n//           <div className=\"grid-stack-item-content\">\n//             <Chart\n//               width=\"100%\"\n//               height=\"100%\"\n//               chartType=\"PieChart\"\n//               data={data}\n//               options={options}\n//             />\n//           </div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"2\">\n//           <div className=\"grid-stack-item-content\"><Chart\n//             width=\"100%\"\n//             height=\"100%\"\n//             chartType=\"BarChart\"\n//             data={dataBar}\n//             options={optionsBar}\n//           /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"2\">\n//           <div className=\"grid-stack-item-content\"><Chart\n//             width=\"100%\"\n//             height=\"100%\"\n//             chartType=\"ScatterChart\"\n//             data={[[\"Age\", \"Weight\"], [4, 5.5], [8, 12]]}\n\n//             legendToggle\n//           /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"2\">\n//           <div className=\"grid-stack-item-content\"><Chart\n//             width=\"100%\"\n//             height=\"100%\"\n//             chartEvents={[\n//               {\n//                 eventName: \"select\",\n//                 callback: ({ chartWrapper }) => {\n//                   const chart = chartWrapper.getChart();\n//                   const selection = chart.getSelection();\n//                   if (selection.length === 0) return;\n//                   const region = data[selection[0].row + 1];\n//                   console.log(\"Selected : \" + region);\n//                 },\n//               },\n//             ]}\n//             chartType=\"GeoChart\"\n\n//             data={data}\n//           /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"2\">\n//           <div className=\"grid-stack-item-content\"><Chart\n//             width=\"100%\"\n//             height=\"100%\"\n//             chartType=\"Histogram\"\n//             data={data}\n//             options={options}\n//           /></div>\n//         </div>\n\n//         <div className=\"grid-stack-item\" gs-w=\"2\">\n//           <div className=\"grid-stack-item-content\"> <Chart\n//             width=\"100%\"\n//             height=\"100%\"\n//             chartType=\"SteppedAreaChart\"\n//             data={data}\n//             options={options}\n//             legendToggle\n//           /></div>\n//         </div>\n\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\"> <img width=\"100%\" height=\"100%\" src={Tema} /></div>\n//         </div>\n\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact highcharts={Highcharts} options={getOptions('line')} /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact  highcharts={Highcharts} options={getOptions('spline')} /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact  highcharts={Highcharts} options={getOptions('area')} /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact highcharts={Highcharts} options={getOptions('areaspline')} /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact highcharts={Highcharts} options={getOptions('column')} /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact highcharts={Highcharts} options={getOptions('bar')} /></div> \n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact highcharts={Highcharts} options={getOptions('pie')} /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact highcharts={Highcharts} options={getOptions('scatter')} /></div>\n//         </div>\n\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"names":["React","use","Chart","Highcharts","HighchartsReact","GridStack","Tema","jsxDEV","_jsxDEV","MyComponent","_s","gridRef","useRef","chartRef","useEffect","options","draggable","handle","scroll","appendTo","placeholderClass","acceptWidgets","cellHeight","grid","init","current","chart","animation","type","plotOptions","series","title","text","xAxis","categories","yAxis","name","data","on","event","items","chartContainer","renderTo","chartHeader","document","querySelector","chartHeight","parentElement","clientHeight","style","height","reflow","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","App","$RefreshReg$"],"sources":["/home/catarina.santos/litegride/src/App.js"],"sourcesContent":["import React, { use } from 'react';\nimport { Chart } from \"react-google-charts\";\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport 'gridstack/dist/gridstack.min.css';\nimport './App.css';\nimport './litegride.css';\nimport { GridStack } from 'gridstack';\nimport Tema from './assets/img/tema.jpg';\nfunction MyComponent() {\n  const gridRef = useRef(null);\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const options = {\n      draggable: {\n        handle: '.dragbox-header',\n        scroll: false,\n        appendTo: 'body',\n      },\n      placeholderClass: 'placeholder',\n      acceptWidgets: true,\n      cellHeight: 60,\n    };\n    const grid = GridStack.init(options, gridRef.current);\n\n    const chart = Highcharts.chart(chartRef.current, {\n      chart: {\n        animation: false,\n        type: 'bar',\n      },\n      plotOptions: {\n        series: {\n          animation: false,\n        },\n      },\n      title: {\n        text: 'Fruit Consumption',\n      },\n      xAxis: {\n        categories: ['Apples', 'Bananas', 'Oranges'],\n      },\n      yAxis: {\n        title: {\n          text: 'Fruit eaten',\n        },\n      },\n      series: [\n        {\n          name: 'Jane',\n          data: [1, 0, 4],\n        },\n        {\n          name: 'John',\n          data: [5, 7, 3],\n        },\n      ],\n    });\n\n    grid.on('change', (event, items) => {\n      const chartContainer = chart.renderTo;\n      const chartHeader = document.querySelector('#testChartHeader');\n      const chartHeight =\n        chartContainer.parentElement.clientHeight - chartHeader.clientHeight;\n\n      chartContainer.style.height = `${chartHeight}px`;\n      chart.reflow();\n    });\n  }, []);\n\n  return (\n    <div>\n      <div className=\"grid-stack\" ref={gridRef}>\n        {/* elementos do seu gridstack */}\n      </div>\n      <div id=\"testChart\">\n        <div id=\"testChartHeader\">\n          {/* elemento do cabeçalho do gráfico */}\n        </div>\n        <div ref={chartRef}>\n          {/* elemento onde o gráfico será renderizado */}\n        </div>\n      </div>\n    </div>\n  );\n} export default App;\n\n\n// function App() {\n//   const [options, setOptions] = useState({\n//     title: 'Gráfico de Pizza'\n//   });\n//   const [optionsBar, setOptionsBar] = useState({\n//     title: 'Gráfico de Barra'\n//   });\n//   const [data, setData] = useState([\n//     ['Linguagens', 'Quantidade'],\n//     ['React', 100],\n//     ['Angula', 80],\n//     ['Vue', 50],\n//   ]);\n//   const [dataBar, setDataBar] = useState([\n//     ['Cidades', '2010 População', '2000 População'],\n//     ['New York City, NY', 8175000, 8008000],\n//     ['Los Angeles, CA', 3792000, 3694000],\n//     ['Chicago, IL', 2695000, 2896000],\n//     ['Houston, TX', 2099000, 1953000],\n//     ['Philadelphia, PA', 1526000, 1517000],\n//   ]);\n//   const getOptions = (type) => ({\n//     chart: {\n//       type,\n//       width: 500,\n//       height: 300,\n//     },\n//     title: {\n//       text: \"Gráfico\",\n//     },\n//     yAxis: {\n//       title: {\n//         text: 'Values',\n//       },\n//     },\n//     series: [\n//       {\n//         data: [1, 2, 1, 4, 3, 6],\n//       },\n//       {\n//         data: [2, 7, 0, 4, 6, 2],\n//       },\n//     ],\n//   });\n\n//   GridStack.init();\n//   return (\n//     <div className=\"App\">\n//       <img className=\"App-logo\" src={Tema} />\n//       <div className=\"grid-stack\">\n//         <div className=\"grid-stack-item\">\n//           <div className=\"grid-stack-item-content\">\n//             <Chart\n//               width=\"100%\"\n//               height=\"100%\"\n//               chartType=\"PieChart\"\n//               data={data}\n//               options={options}\n//             />\n//           </div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"2\">\n//           <div className=\"grid-stack-item-content\"><Chart\n//             width=\"100%\"\n//             height=\"100%\"\n//             chartType=\"BarChart\"\n//             data={dataBar}\n//             options={optionsBar}\n//           /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"2\">\n//           <div className=\"grid-stack-item-content\"><Chart\n//             width=\"100%\"\n//             height=\"100%\"\n//             chartType=\"ScatterChart\"\n//             data={[[\"Age\", \"Weight\"], [4, 5.5], [8, 12]]}\n\n//             legendToggle\n//           /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"2\">\n//           <div className=\"grid-stack-item-content\"><Chart\n//             width=\"100%\"\n//             height=\"100%\"\n//             chartEvents={[\n//               {\n//                 eventName: \"select\",\n//                 callback: ({ chartWrapper }) => {\n//                   const chart = chartWrapper.getChart();\n//                   const selection = chart.getSelection();\n//                   if (selection.length === 0) return;\n//                   const region = data[selection[0].row + 1];\n//                   console.log(\"Selected : \" + region);\n//                 },\n//               },\n//             ]}\n//             chartType=\"GeoChart\"\n\n//             data={data}\n//           /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"2\">\n//           <div className=\"grid-stack-item-content\"><Chart\n//             width=\"100%\"\n//             height=\"100%\"\n//             chartType=\"Histogram\"\n//             data={data}\n//             options={options}\n//           /></div>\n//         </div>\n\n//         <div className=\"grid-stack-item\" gs-w=\"2\">\n//           <div className=\"grid-stack-item-content\"> <Chart\n//             width=\"100%\"\n//             height=\"100%\"\n//             chartType=\"SteppedAreaChart\"\n//             data={data}\n//             options={options}\n//             legendToggle\n//           /></div>\n//         </div>\n        \n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\"> <img width=\"100%\" height=\"100%\" src={Tema} /></div>\n//         </div>\n        \n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact highcharts={Highcharts} options={getOptions('line')} /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact  highcharts={Highcharts} options={getOptions('spline')} /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact  highcharts={Highcharts} options={getOptions('area')} /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact highcharts={Highcharts} options={getOptions('areaspline')} /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact highcharts={Highcharts} options={getOptions('column')} /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact highcharts={Highcharts} options={getOptions('bar')} /></div> \n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact highcharts={Highcharts} options={getOptions('pie')} /></div>\n//         </div>\n//         <div className=\"grid-stack-item\" gs-w=\"3\" gs-h=\"2\">\n//           <div className=\"grid-stack-item-content\">\n//             <HighchartsReact highcharts={Highcharts} options={getOptions('scatter')} /></div>\n//         </div>\n\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}