{"ast":null,"code":"\"use strict\";\n\n/**\r\n * dd-droppable.ts 7.2.3\r\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DDDroppable = void 0;\nconst dd_manager_1 = require(\"./dd-manager\");\nconst dd_base_impl_1 = require(\"./dd-base-impl\");\nconst utils_1 = require(\"./utils\");\nconst dd_touch_1 = require(\"./dd-touch\");\n// let count = 0; // TEST\nclass DDDroppable extends dd_base_impl_1.DDBaseImplement {\n  constructor(el) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n  on(event, callback) {\n    super.on(event, callback);\n  }\n  off(event) {\n    super.off(event);\n  }\n  enable() {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (dd_touch_1.isTouch) {\n      this.el.addEventListener('pointerenter', dd_touch_1.pointerenter);\n      this.el.addEventListener('pointerleave', dd_touch_1.pointerleave);\n    }\n  }\n  disable() {\n    let forDestroy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (dd_touch_1.isTouch) {\n      this.el.removeEventListener('pointerenter', dd_touch_1.pointerenter);\n      this.el.removeEventListener('pointerleave', dd_touch_1.pointerleave);\n    }\n  }\n  destroy() {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n  updateOption(opts) {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  _mouseEnter(e) {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!dd_manager_1.DDManager.dragElement) return;\n    if (!this._canDrop(dd_manager_1.DDManager.dragElement.el)) return;\n    e.preventDefault();\n    e.stopPropagation();\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (dd_manager_1.DDManager.dropElement && dd_manager_1.DDManager.dropElement !== this) {\n      dd_manager_1.DDManager.dropElement._mouseLeave(e);\n    }\n    dd_manager_1.DDManager.dropElement = this;\n    const ev = utils_1.Utils.initEvent(e, {\n      target: this.el,\n      type: 'dropover'\n    });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(dd_manager_1.DDManager.dragElement));\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  _mouseLeave(e) {\n    var _a;\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!dd_manager_1.DDManager.dragElement || dd_manager_1.DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n    const ev = utils_1.Utils.initEvent(e, {\n      target: this.el,\n      type: 'dropout'\n    });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(dd_manager_1.DDManager.dragElement));\n    }\n    this.triggerEvent('dropout', ev);\n    if (dd_manager_1.DDManager.dropElement === this) {\n      delete dd_manager_1.DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      let parentDrop;\n      let parent = this.el.parentElement;\n      while (!parentDrop && parent) {\n        parentDrop = (_a = parent.ddElement) === null || _a === void 0 ? void 0 : _a.ddDroppable;\n        parent = parent.parentElement;\n      }\n      if (parentDrop) {\n        parentDrop._mouseEnter(e);\n      }\n    }\n  }\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  drop(e) {\n    e.preventDefault();\n    const ev = utils_1.Utils.initEvent(e, {\n      target: this.el,\n      type: 'drop'\n    });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(dd_manager_1.DDManager.dragElement));\n    }\n    this.triggerEvent('drop', ev);\n  }\n  /** @internal true if element matches the string/method accept option */\n  _canDrop(el) {\n    return el && (!this.accept || this.accept(el));\n  }\n  /** @internal */\n  _setupAccept() {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = el => el.matches(this.option.accept);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n  /** @internal */\n  _ui(drag) {\n    return Object.assign({\n      draggable: drag.el\n    }, drag.ui());\n  }\n}\nexports.DDDroppable = DDDroppable;","map":{"version":3,"names":["dd_manager_1","require","dd_base_impl_1","utils_1","dd_touch_1","DDDroppable","DDBaseImplement","constructor","el","opts","arguments","length","undefined","option","_mouseEnter","bind","_mouseLeave","enable","_setupAccept","on","event","callback","off","disabled","classList","add","remove","addEventListener","isTouch","pointerenter","pointerleave","disable","forDestroy","removeEventListener","destroy","updateOption","Object","keys","forEach","key","e","DDManager","dragElement","_canDrop","preventDefault","stopPropagation","dropElement","ev","Utils","initEvent","target","type","over","_ui","triggerEvent","out","parentDrop","parent","parentElement","_a","ddElement","ddDroppable","drop","accept","matches","drag","assign","draggable","ui","exports"],"sources":["/home/catarina.santos/litegride/node_modules/gridstack/src/dd-droppable.ts"],"sourcesContent":["/**\n * dd-droppable.ts 7.2.3\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\nimport { DDUIData } from './types';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui: DDUIData) => void;\n  over?: (event: DragEvent, ui: DDUIData) => void;\n  out?: (event: DragEvent, ui: DDUIData) => void;\n}\n\n// let count = 0; // TEST\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.addEventListener('pointerenter', pointerenter);\n      this.el.addEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.removeEventListener('pointerenter', pointerenter);\n      this.el.removeEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public destroy(): void {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _mouseEnter(e: MouseEvent): void {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement) return;\n    if (!this._canDrop(DDManager.dragElement.el)) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\n      DDManager.dropElement._mouseLeave(e as DragEvent);\n    }\n    DDManager.dropElement = this;\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _mouseLeave(e: MouseEvent): void {\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropout', ev);\n\n    if (DDManager.dropElement === this) {\n      delete DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      let parentDrop: DDDroppable;\n      let parent: DDElementHost = this.el.parentElement;\n      while (!parentDrop && parent) {\n        parentDrop = parent.ddElement?.ddDroppable;\n        parent = parent.parentElement;\n      }\n      if (parentDrop) {\n        parentDrop._mouseEnter(e);\n      }\n    }\n  }\n\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  public drop(e: MouseEvent): void {\n    e.preventDefault();\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n  }\n\n  /** @internal true if element matches the string/method accept option */\n  protected _canDrop(el: HTMLElement): boolean {\n    return el && (!this.accept || this.accept(el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => el.matches(this.option.accept as string);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable): DDUIData {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}