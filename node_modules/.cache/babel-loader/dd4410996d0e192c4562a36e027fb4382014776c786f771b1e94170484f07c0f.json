{"ast":null,"code":"\"use strict\";\n\n/**\r\n * dd-gridstack.ts 7.2.3\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DDGridStack = void 0;\nconst utils_1 = require(\"./utils\");\nconst dd_manager_1 = require(\"./dd-manager\");\nconst dd_element_1 = require(\"./dd-element\");\n// let count = 0; // TEST\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\nclass DDGridStack {\n  resizable(el, opts, key, value) {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\n      } else if (opts === 'destroy') {\n        dEl.ddResizable && dEl.cleanResizable();\n      } else if (opts === 'option') {\n        dEl.setupResizable({\n          [key]: value\n        });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\n        dEl.setupResizable(Object.assign(Object.assign(Object.assign({}, grid.opts.resizable), {\n          handles,\n          autoHide\n        }), {\n          start: opts.start,\n          stop: opts.stop,\n          resize: opts.resize\n        }));\n      }\n    });\n    return this;\n  }\n  draggable(el, opts, key, value) {\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\n      } else if (opts === 'destroy') {\n        dEl.ddDraggable && dEl.cleanDraggable();\n      } else if (opts === 'option') {\n        dEl.setupDraggable({\n          [key]: value\n        });\n      } else {\n        const grid = dEl.el.gridstackNode.grid;\n        dEl.setupDraggable(Object.assign(Object.assign({}, grid.opts.draggable), {\n          // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\n          start: opts.start,\n          stop: opts.stop,\n          drag: opts.drag\n        }));\n      }\n    });\n    return this;\n  }\n  dragIn(el, opts) {\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\n    return this;\n  }\n  droppable(el, opts, key, value) {\n    if (typeof opts.accept === 'function' && !opts._accept) {\n      opts._accept = opts.accept;\n      opts.accept = el => opts._accept(el);\n    }\n    this._getDDElements(el).forEach(dEl => {\n      if (opts === 'disable' || opts === 'enable') {\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\n      } else if (opts === 'destroy') {\n        if (dEl.ddDroppable) {\n          // error to call destroy if not there\n          dEl.cleanDroppable();\n        }\n      } else if (opts === 'option') {\n        dEl.setupDroppable({\n          [key]: value\n        });\n      } else {\n        dEl.setupDroppable(opts);\n      }\n    });\n    return this;\n  }\n  /** true if element is droppable */\n  isDroppable(el) {\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\n  }\n  /** true if element is draggable */\n  isDraggable(el) {\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\n  }\n  /** true if element is draggable */\n  isResizable(el) {\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\n  }\n  on(el, name, callback) {\n    this._getDDElements(el).forEach(dEl => dEl.on(name, event => {\n      callback(event, dd_manager_1.DDManager.dragElement ? dd_manager_1.DDManager.dragElement.el : event.target, dd_manager_1.DDManager.dragElement ? dd_manager_1.DDManager.dragElement.helper : null);\n    }));\n    return this;\n  }\n  off(el, name) {\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\n    return this;\n  }\n  /** @internal returns a list of DD elements, creating them on the fly by default */\n  _getDDElements(els) {\n    let create = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let hosts = utils_1.Utils.getElements(els);\n    if (!hosts.length) return [];\n    let list = hosts.map(e => e.ddElement || (create ? dd_element_1.DDElement.init(e) : null));\n    if (!create) {\n      list.filter(d => d);\n    } // remove nulls\n    return list;\n  }\n}\nexports.DDGridStack = DDGridStack;","map":{"version":3,"names":["utils_1","require","dd_manager_1","dd_element_1","DDGridStack","resizable","el","opts","key","value","_getDDElements","forEach","dEl","ddResizable","cleanResizable","setupResizable","grid","gridstackNode","handles","getAttribute","autoHide","alwaysShowResizeHandle","Object","assign","start","stop","resize","draggable","ddDraggable","cleanDraggable","setupDraggable","drag","dragIn","droppable","accept","_accept","ddDroppable","cleanDroppable","setupDroppable","isDroppable","ddElement","disabled","isDraggable","isResizable","on","name","callback","event","DDManager","dragElement","target","helper","off","els","create","arguments","length","undefined","hosts","Utils","getElements","list","map","e","DDElement","init","filter","d","exports"],"sources":["/home/catarina.santos/litegride/node_modules/gridstack/src/dd-gridstack.ts"],"sourcesContent":["/**\r\n * dd-gridstack.ts 7.2.3\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackElement, DDDragInOpt } from './types';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n"],"mappings":";;AAAA;;;;;;;;AAOA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,YAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AAiBA;AAEA;;;AAGA,MAAaG,WAAW;EAEfC,SAASA,CAACC,EAAuB,EAAEC,IAAY,EAAEC,GAAW,EAAEC,KAAe;IAClF,IAAI,CAACC,cAAc,CAACJ,EAAE,CAAC,CAACK,OAAO,CAACC,GAAG,IAAG;MACpC,IAAIL,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,QAAQ,EAAE;QAC3CK,GAAG,CAACC,WAAW,IAAID,GAAG,CAACC,WAAW,CAACN,IAAI,CAAC,EAAE,CAAC,CAAC;OAC7C,MAAM,IAAIA,IAAI,KAAK,SAAS,EAAE;QAC7BK,GAAG,CAACC,WAAW,IAAID,GAAG,CAACE,cAAc,EAAE;OACxC,MAAM,IAAIP,IAAI,KAAK,QAAQ,EAAE;QAC5BK,GAAG,CAACG,cAAc,CAAC;UAAE,CAACP,GAAG,GAAGC;QAAK,CAAE,CAAC;OACrC,MAAM;QACL,MAAMO,IAAI,GAAGJ,GAAG,CAACN,EAAE,CAACW,aAAa,CAACD,IAAI;QACtC,IAAIE,OAAO,GAAGN,GAAG,CAACN,EAAE,CAACa,YAAY,CAAC,mBAAmB,CAAC,GAAGP,GAAG,CAACN,EAAE,CAACa,YAAY,CAAC,mBAAmB,CAAC,GAAGH,IAAI,CAACT,IAAI,CAACF,SAAS,CAACa,OAAO;QAC/H,IAAIE,QAAQ,GAAG,CAACJ,IAAI,CAACT,IAAI,CAACc,sBAAsB;QAChDT,GAAG,CAACG,cAAc,CAAAO,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACbP,IAAI,CAACT,IAAI,CAACF,SAAS,GACnB;UAAEa,OAAO;UAAEE;QAAQ,CAAE,GACrB;UACDI,KAAK,EAAEjB,IAAI,CAACiB,KAAK;UACjBC,IAAI,EAAElB,IAAI,CAACkB,IAAI;UACfC,MAAM,EAAEnB,IAAI,CAACmB;SACd,EACD;;IAEN,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EAEOC,SAASA,CAACrB,EAAuB,EAAEC,IAAY,EAAEC,GAAW,EAAEC,KAAe;IAClF,IAAI,CAACC,cAAc,CAACJ,EAAE,CAAC,CAACK,OAAO,CAACC,GAAG,IAAG;MACpC,IAAIL,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,QAAQ,EAAE;QAC3CK,GAAG,CAACgB,WAAW,IAAIhB,GAAG,CAACgB,WAAW,CAACrB,IAAI,CAAC,EAAE,CAAC,CAAC;OAC7C,MAAM,IAAIA,IAAI,KAAK,SAAS,EAAE;QAC7BK,GAAG,CAACgB,WAAW,IAAIhB,GAAG,CAACiB,cAAc,EAAE;OACxC,MAAM,IAAItB,IAAI,KAAK,QAAQ,EAAE;QAC5BK,GAAG,CAACkB,cAAc,CAAC;UAAE,CAACtB,GAAG,GAAGC;QAAK,CAAE,CAAC;OACrC,MAAM;QACL,MAAMO,IAAI,GAAGJ,GAAG,CAACN,EAAE,CAACW,aAAa,CAACD,IAAI;QACtCJ,GAAG,CAACkB,cAAc,CAAAR,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACbP,IAAI,CAACT,IAAI,CAACoB,SAAS,GACnB;UACD;UACAH,KAAK,EAAEjB,IAAI,CAACiB,KAAK;UACjBC,IAAI,EAAElB,IAAI,CAACkB,IAAI;UACfM,IAAI,EAAExB,IAAI,CAACwB;SACZ,EACD;;IAEN,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EAEOC,MAAMA,CAAC1B,EAAoB,EAAEC,IAAiB;IACnD,IAAI,CAACG,cAAc,CAACJ,EAAE,CAAC,CAACK,OAAO,CAACC,GAAG,IAAIA,GAAG,CAACkB,cAAc,CAACvB,IAAI,CAAC,CAAC;IAChE,OAAO,IAAI;EACb;EAEO0B,SAASA,CAAC3B,EAAuB,EAAEC,IAAwB,EAAEC,GAAW,EAAEC,KAAe;IAC9F,IAAI,OAAOF,IAAI,CAAC2B,MAAM,KAAK,UAAU,IAAI,CAAC3B,IAAI,CAAC4B,OAAO,EAAE;MACtD5B,IAAI,CAAC4B,OAAO,GAAG5B,IAAI,CAAC2B,MAAM;MAC1B3B,IAAI,CAAC2B,MAAM,GAAI5B,EAAE,IAAKC,IAAI,CAAC4B,OAAO,CAAC7B,EAAE,CAAC;;IAExC,IAAI,CAACI,cAAc,CAACJ,EAAE,CAAC,CAACK,OAAO,CAACC,GAAG,IAAG;MACpC,IAAIL,IAAI,KAAK,SAAS,IAAIA,IAAI,KAAK,QAAQ,EAAE;QAC3CK,GAAG,CAACwB,WAAW,IAAIxB,GAAG,CAACwB,WAAW,CAAC7B,IAAI,CAAC,EAAE;OAC3C,MAAM,IAAIA,IAAI,KAAK,SAAS,EAAE;QAC7B,IAAIK,GAAG,CAACwB,WAAW,EAAE;UAAE;UACrBxB,GAAG,CAACyB,cAAc,EAAE;;OAEvB,MAAM,IAAI9B,IAAI,KAAK,QAAQ,EAAE;QAC5BK,GAAG,CAAC0B,cAAc,CAAC;UAAE,CAAC9B,GAAG,GAAGC;QAAK,CAAE,CAAC;OACrC,MAAM;QACLG,GAAG,CAAC0B,cAAc,CAAC/B,IAAI,CAAC;;IAE5B,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EAEA;EACOgC,WAAWA,CAACjC,EAAiB;IAClC,OAAO,CAAC,EAAEA,EAAE,IAAIA,EAAE,CAACkC,SAAS,IAAIlC,EAAE,CAACkC,SAAS,CAACJ,WAAW,IAAI,CAAC9B,EAAE,CAACkC,SAAS,CAACJ,WAAW,CAACK,QAAQ,CAAC;EACjG;EAEA;EACOC,WAAWA,CAACpC,EAAiB;IAClC,OAAO,CAAC,EAAEA,EAAE,IAAIA,EAAE,CAACkC,SAAS,IAAIlC,EAAE,CAACkC,SAAS,CAACZ,WAAW,IAAI,CAACtB,EAAE,CAACkC,SAAS,CAACZ,WAAW,CAACa,QAAQ,CAAC;EACjG;EAEA;EACOE,WAAWA,CAACrC,EAAiB;IAClC,OAAO,CAAC,EAAEA,EAAE,IAAIA,EAAE,CAACkC,SAAS,IAAIlC,EAAE,CAACkC,SAAS,CAAC3B,WAAW,IAAI,CAACP,EAAE,CAACkC,SAAS,CAAC3B,WAAW,CAAC4B,QAAQ,CAAC;EACjG;EAEOG,EAAEA,CAACtC,EAAuB,EAAEuC,IAAY,EAAEC,QAAoB;IACnE,IAAI,CAACpC,cAAc,CAACJ,EAAE,CAAC,CAACK,OAAO,CAACC,GAAG,IACjCA,GAAG,CAACgC,EAAE,CAACC,IAAI,EAAGE,KAAY,IAAI;MAC5BD,QAAQ,CACNC,KAAK,EACL7C,YAAA,CAAA8C,SAAS,CAACC,WAAW,GAAG/C,YAAA,CAAA8C,SAAS,CAACC,WAAW,CAAC3C,EAAE,GAAGyC,KAAK,CAACG,MAA6B,EACtFhD,YAAA,CAAA8C,SAAS,CAACC,WAAW,GAAG/C,YAAA,CAAA8C,SAAS,CAACC,WAAW,CAACE,MAAM,GAAG,IAAI,CAAC;IAChE,CAAC,CAAC,CACH;IACD,OAAO,IAAI;EACb;EAEOC,GAAGA,CAAC9C,EAAuB,EAAEuC,IAAY;IAC9C,IAAI,CAACnC,cAAc,CAACJ,EAAE,CAAC,CAACK,OAAO,CAACC,GAAG,IAAIA,GAAG,CAACwC,GAAG,CAACP,IAAI,CAAC,CAAC;IACrD,OAAO,IAAI;EACb;EAEA;EACUnC,cAAcA,CAAC2C,GAAqB,EAAe;IAAA,IAAbC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IAC3D,IAAIG,KAAK,GAAG1D,OAAA,CAAA2D,KAAK,CAACC,WAAW,CAACP,GAAG,CAAoB;IACrD,IAAI,CAACK,KAAK,CAACF,MAAM,EAAE,OAAO,EAAE;IAC5B,IAAIK,IAAI,GAAGH,KAAK,CAACI,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACvB,SAAS,KAAKc,MAAM,GAAGnD,YAAA,CAAA6D,SAAS,CAACC,IAAI,CAACF,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IAC7E,IAAI,CAACT,MAAM,EAAE;MAAEO,IAAI,CAACK,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC;KAAG,CAAC;IACtC,OAAON,IAAI;EACb;;AArHFO,OAAA,CAAAhE,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}