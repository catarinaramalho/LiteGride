{"ast":null,"code":"\"use strict\";\n\n/**\r\n * touch.ts 7.2.3\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pointerleave = exports.pointerenter = exports.pointerdown = exports.touchend = exports.touchmove = exports.touchstart = exports.isTouch = void 0;\nconst dd_manager_1 = require(\"./dd-manager\");\n/**\r\n * Detect touch support - Windows Surface devices and other touch devices\r\n * should we use this instead ? (what we had for always showing resize handles)\r\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\r\n */\nexports.isTouch = typeof window !== 'undefined' && typeof document !== 'undefined' && ('ontouchstart' in document || 'ontouchstart' in window\n// || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n|| window.DocumentTouch && document instanceof window.DocumentTouch || navigator.maxTouchPoints > 0\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n|| navigator.msMaxTouchPoints > 0);\n// interface TouchCoord {x: number, y: number};\nclass DDTouch {}\n/**\r\n* Get the x,y position of a touch event\r\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n/**\r\n * Simulate a mouse event based on a corresponding touch event\r\n * @param {Object} e A touch event\r\n * @param {String} simulatedType The corresponding mouse event\r\n */\nfunction simulateMouseEvent(e, simulatedType) {\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n  const touch = e.changedTouches[0],\n    simulatedEvent = document.createEvent('MouseEvents');\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(simulatedType,\n  // type\n  true,\n  // bubbles\n  true,\n  // cancelable\n  window,\n  // view\n  1,\n  // detail\n  touch.screenX,\n  // screenX\n  touch.screenY,\n  // screenY\n  touch.clientX,\n  // clientX\n  touch.clientY,\n  // clientY\n  false,\n  // ctrlKey\n  false,\n  // altKey\n  false,\n  // shiftKey\n  false,\n  // metaKey\n  0,\n  // button\n  null // relatedTarget\n  );\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n/**\r\n * Simulate a mouse event based on a corresponding Pointer event\r\n * @param {Object} e A pointer event\r\n * @param {String} simulatedType The corresponding mouse event\r\n */\nfunction simulatePointerMouseEvent(e, simulatedType) {\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n  const simulatedEvent = document.createEvent('MouseEvents');\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(simulatedType,\n  // type\n  true,\n  // bubbles\n  true,\n  // cancelable\n  window,\n  // view\n  1,\n  // detail\n  e.screenX,\n  // screenX\n  e.screenY,\n  // screenY\n  e.clientX,\n  // clientX\n  e.clientY,\n  // clientY\n  false,\n  // ctrlKey\n  false,\n  // altKey\n  false,\n  // shiftKey\n  false,\n  // metaKey\n  0,\n  // button\n  null // relatedTarget\n  );\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n/**\r\n * Handle the touchstart events\r\n * @param {Object} e The widget element's touchstart event\r\n */\nfunction touchstart(e) {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;\n  DDTouch.touchHandled = true;\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\nexports.touchstart = touchstart;\n/**\r\n * Handle the touchmove events\r\n * @param {Object} e The document's touchmove event\r\n */\nfunction touchmove(e) {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled) return;\n  simulateMouseEvent(e, 'mousemove');\n}\nexports.touchmove = touchmove;\n/**\r\n * Handle the touchend events\r\n * @param {Object} e The document's touchend event\r\n */\nfunction touchend(e) {\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n  const wasDragging = !!dd_manager_1.DDManager.dragElement;\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\nexports.touchend = touchend;\n/**\r\n * Note we don't get touchenter/touchleave (which are deprecated)\r\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\r\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\r\n */\nfunction pointerdown(e) {\n  e.target.releasePointerCapture(e.pointerId); // <- Important!\n}\n\nexports.pointerdown = pointerdown;\nfunction pointerenter(e) {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!dd_manager_1.DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\nexports.pointerenter = pointerenter;\nfunction pointerleave(e) {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!dd_manager_1.DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\nexports.pointerleave = pointerleave;","map":{"version":3,"names":["dd_manager_1","require","exports","isTouch","window","document","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","DDTouch","simulateMouseEvent","e","simulatedType","touches","length","cancelable","preventDefault","touch","changedTouches","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","clientX","clientY","target","dispatchEvent","simulatePointerMouseEvent","touchstart","touchHandled","touchmove","touchend","pointerLeaveTimeout","clearTimeout","wasDragging","DDManager","dragElement","pointerdown","releasePointerCapture","pointerId","pointerenter","pointerleave","setTimeout"],"sources":["/home/catarina.santos/litegride/node_modules/gridstack/src/dd-touch.ts"],"sourcesContent":["/**\n * touch.ts 7.2.3\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\n\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch: boolean = typeof window !== 'undefined' && typeof document !== 'undefined' &&\n( 'ontouchstart' in document\n  || 'ontouchstart' in window\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\n  || navigator.maxTouchPoints > 0\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || (navigator as any).msMaxTouchPoints > 0\n);\n\n// interface TouchCoord {x: number, y: number};\n\nclass DDTouch {\n  public static touchHandled: boolean;\n  public static pointerLeaveTimeout: number;\n}\n\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\n\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    touch.screenX,    // screenX\n    touch.screenY,    // screenY\n    touch.clientX,    // clientX\n    touch.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    e.screenX,    // screenX\n    e.screenY,    // screenY\n    e.clientX,    // clientX\n    e.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e: TouchEvent): void {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;  DDTouch.touchHandled = true;\n\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\n\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e: TouchEvent): void {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled)  return;\n\n  simulateMouseEvent(e, 'mousemove');\n}\n\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e: TouchEvent): void {\n\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n\n  const wasDragging = !!DDManager.dragElement;\n\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\n\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e: PointerEvent): void {\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\n}\n\nexport function pointerenter(e: PointerEvent): void {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\n\nexport function pointerleave(e: PointerEvent): void {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}