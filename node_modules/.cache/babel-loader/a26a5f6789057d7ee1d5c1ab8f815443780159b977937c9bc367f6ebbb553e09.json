{"ast":null,"code":"\"use strict\";\n\n/**\r\n * dd-manager.ts 7.2.3\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DDManager = void 0;\n/**\r\n * globals that are shared across Drag & Drop instances\r\n */\nclass DDManager {}\nexports.DDManager = DDManager;","map":{"version":3,"names":["DDManager","exports"],"sources":["/home/catarina.santos/litegride/node_modules/gridstack/src/dd-manager.ts"],"sourcesContent":["/**\n * dd-manager.ts 7.2.3\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nimport { DDResizable } from './dd-resizable';\n\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n  /** if set (true | in msec), dragging placement (collision) will only happen after a pause by the user*/\n  public static pauseDrag: boolean | number;\n\n  /** true if a mouse down event was handled */\n  public static mouseHandled: boolean;\n\n  /** item being dragged */\n  public static dragElement: DDDraggable;\n\n  /** item we are currently over as drop target */\n  public static dropElement: DDDroppable;\n\n  /** current item we're over for resizing purpose (ignore nested grid resize handles) */\n  public static overResizeElement: DDResizable;\n\n}\n"],"mappings":";;AAAA;;;;;;;;AASA;;;AAGA,MAAaA,SAAS;AAAtBC,OAAA,CAAAD,SAAA,GAAAA,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}